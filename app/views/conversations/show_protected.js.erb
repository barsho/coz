var parent_convo = $(".info_conversation");
var parent_convo_children = $(".info_conversation .protected_post");
var parent_convo_siblings = $(".info_conversation ~ .conversation:not(:last)");


var parent_post = $("#pp<%= escape_javascript( (1 + @conversation.conversationable.conversations.index(@conversation)).to_s() )%>");


parent_convo_children.css("opacity", "0.7");
parent_post.css("opacity", "1");


parent_convo_siblings.css("display","none");


var left_offset = ( parent_post.attr("index") - 1)* 215 + 100;

parent_convo.find(".arrow").css("opacity","0").css("left", left_offset ).css("display","block").animate({
    opacity: 1
  }, 100, function() {
    // Animation complete.
  });

parent_convo.after("<%= escape_javascript(render(@conversation) )%>"); 

var convo = $("#c<%= escape_javascript(@conversation.id.to_s() )%>");

convo.data("realHeight", convo.height() ).css("height","0").animate({
    height: convo.data("realHeight")
  }, 250, function() {
    // Animation complete.
  });

posts = convo.find(".post");

posts.draggable({
										containment: "document",
										helper: "clone",
										scroll: true,
										opacity: 0.7,
										appendTo: "html",
										cursor: 'move',
										revert: 'invalid',
										zIndex: 9999,
										activeClass: "post_during_drag"
	        })

posts.droppable({ accept: ".post", 
						  activeClass: "expecting_collision",
              over: function() {
                   var child_conversation_path = $(this).find(".get_post").attr("href");
                   var drop_id = $(this).find(".get_post").attr("href").substr(15);
									 $(this).removeClass('expecting_collision').addClass('during_collision');
									 $.ajax({
										        url: child_conversation_path,
										        type: "get",
														data: {drop_id: drop_id},
										        // callback handler that will be called on success
										        success: function(response, textStatus, jqXHR){
										            // log a message to the console
										            console.log("over:droppable");
										        },
										        // callback handler that will be called on error
										        error: function(jqXHR, textStatus, errorThrown){
										            // log the error to the console
										            console.log(
										                "The following error occured: "+
										                textStatus, errorThrown
										            );
										        },
										        complete: function(){

										        }
										    });

              },
              out: function() {
                      $(this).removeClass('during_collision').addClass('expecting_collision');
              },
              drop: function(event, ui) {
                      var drag_id = ui.draggable.attr("id").substr(1);
                      var drop_id = $(this).find(".get_post").attr("href").substr(15);
										$(this).removeClass('during_collision').addClass('expecting_collision');



									 $.ajax({
										        url: "/posts/" + drag_id + "/move",
										        type: "get",
														data: {drop_id: drop_id},
										        // callback handler that will be called on success
										        success: function(response, textStatus, jqXHR){
										            // log a message to the console
										            console.log("drop:droppable");
										        },
										        // callback handler that will be called on error
										        error: function(jqXHR, textStatus, errorThrown){
										            // log the error to the console
										            console.log(
										                "The following error occured: "+
										                textStatus, errorThrown
										            );
										        },
										        complete: function(){

										        }
										    });

              }
});

