var parent_convo = $(".menu");
var parent_convo_children = $(".menu .menu_button");
var parent_convo_siblings = $(".menu ~ .column:not(.feed)");



var parent_post = $("#pp<%= escape_javascript( (@conversation.conversationable.conversations.index(@conversation)).to_s() )%>");

parent_convo.after("<%= escape_javascript(render(@conversation) )%>"); 

var convo = $("#c<%= escape_javascript(@conversation.id.to_s() )%>");

var protectedFrame = $("#protectedFrame");
var feedFrame = $("#feedFrame");


var dWidth = 200 - parent_convo_siblings.length * 200;

var pF_width_buffer = protectedFrame.css("width");
var pF_width = pF_width_buffer.slice(0,pF_width_buffer.length-2);
var fF_offset = feedFrame.css("left");

var borderLocation = parseInt(pF_width) + parseInt(dWidth);


protectedFrame.animate({ width: borderLocation }, 250, function() {
  // Animation complete.
});

feedFrame.animate({ left: borderLocation }, 250, function() {
  // Animation complete.
});

convo.addClass("protected");

convo.data("realWidth", convo.width() ).css("width","0").animate({
    width: convo.data("realWidth")
  }, 250, function() {
    // Animation complete.
  });

$(".menu_button").removeClass("active_button");
$("#pp<%= escape_javascript( ( @conversation.conversationable.conversations.index(@conversation)).to_s() )%>").addClass("active_button");

parent_convo_siblings.remove();

posts = convo.find(".post");

posts.draggable({
										containment: "document",
										helper: "clone",
										scroll: true,
										opacity: 0.7,
										appendTo: "html",
										cursor: 'move',
										revert: 'invalid',
										zIndex: 9999,
										activeClass: "post_during_drag"
	        })

posts.droppable({ accept: ".post", 
						  activeClass: "expecting_collision",
              over: function() {
                   var child_conversation_path = $(this).find(".get_post").attr("href");
                   var drop_id = $(this).find(".get_post").attr("href").substr(15);
									 $(this).removeClass('expecting_collision').addClass('during_collision');
									 $.ajax({
										        url: child_conversation_path,
										        type: "get",
														data: {drop_id: drop_id},
										        // callback handler that will be called on success
										        success: function(response, textStatus, jqXHR){
										            // log a message to the console
										            console.log("over:droppable");
										        },
										        // callback handler that will be called on error
										        error: function(jqXHR, textStatus, errorThrown){
										            // log the error to the console
										            console.log(
										                "The following error occured: "+
										                textStatus, errorThrown
										            );
										        },
										        complete: function(){

										        }
										    });

              },
              out: function() {
                      $(this).removeClass('during_collision').addClass('expecting_collision');
              },
              drop: function(event, ui) {
                      var drag_id = ui.draggable.attr("id").substr(1);
                      var drop_id = $(this).find(".get_post").attr("href").substr(15);
										$(this).removeClass('during_collision').addClass('expecting_collision');



									 $.ajax({
										        url: "/posts/" + drag_id + "/move",
										        type: "get",
														data: {drop_id: drop_id},
										        // callback handler that will be called on success
										        success: function(response, textStatus, jqXHR){
										            // log a message to the console
										            console.log("drop:droppable");
										        },
										        // callback handler that will be called on error
										        error: function(jqXHR, textStatus, errorThrown){
										            // log the error to the console
										            console.log(
										                "The following error occured: "+
										                textStatus, errorThrown
										            );
										        },
										        complete: function(){

										        }
										    });

              }
});

