

var parent_convo = $("#c<%= escape_javascript(@conversation.conversationable.conversation.id.to_s() )%>");
var parent_convo_children = $("#c<%= escape_javascript(@conversation.conversationable.conversation.id.to_s() )%> .post");
var parent_convo_siblings = $("#c<%= escape_javascript(@conversation.conversationable.conversation.id.to_s() )%> ~ .column");

var parent_post = $("#p<%= escape_javascript(@conversation.conversationable.id.to_s() )%>");


parent_convo_children.css("opacity", "0.7");
parent_post.css("opacity", "1");


// var left_offset = ( parent_post.attr("index") - 1)* 215 + 100;

/* parent_convo.find(".arrow").css("left", left_offset ).css("display","block").animate({
    opacity: 1
  }, 100, function() {
    // Animation complete.
  });
*/
parent_convo.after("<%= escape_javascript(render(@conversation) )%>"); 

var convo = $("#c<%= escape_javascript(@conversation.id.to_s() )%>");

if (parent_convo.hasClass("protected")) {
	var protectedFrame = $("#protectedFrame");
	var feedFrame = $("#feedFrame");


	var dWidth = 200 - parent_convo_siblings.length * 200;

	var pF_width_buffer = protectedFrame.css("width");
	var pF_width = pF_width_buffer.slice(0,pF_width_buffer.length-2);
	var fF_offset = feedFrame.css("left");

	var borderLocation = parseInt(pF_width) + parseInt(dWidth);


	parent_convo_siblings.remove();
	protectedFrame.animate({ width: borderLocation }, 250, function() {
	  // Animation complete.
	});

	feedFrame.animate({ left: borderLocation }, 250, function() {
	  // Animation complete.
	});

	convo.addClass("protected");	
}
if (parent_convo.hasClass("feed")) {
	convo.addClass("feed");	
	
	parent_convo_siblings.remove();
}

convo.data("realWidth", convo.width() ).css("width","0").animate({
    width: convo.data("realWidth")
  }, 250, function() {
    // Animation complete.
  });

posts = convo.find(".post");
	
posts.draggable({
										containment: "document",
										helper: "clone",
										scroll: true,
										opacity: 0.7,
										appendTo: "html",
										cursor: 'move',
										revert: 'invalid',
										zIndex: 9999,
										activeClass: "post_during_drag"
	        })
	
posts.droppable({ accept: ".post", 
						  activeClass: "expecting_collision",
              over: function() {
                   var child_conversation_path = $(this).find(".get_post").attr("href");
									 $(this).removeClass('expecting_collision').addClass('during_collision');
                   var drop_id = $(this).find(".get_post").attr("href").substr(15);									
									 $.ajax({
										        url: child_conversation_path,
										        type: "get",

										        // callback handler that will be called on success
										        success: function(response, textStatus, jqXHR){
										            // log a message to the console
										            console.log("over:droppable");
										        },
										        // callback handler that will be called on error
										        error: function(jqXHR, textStatus, errorThrown){
										            // log the error to the console
										            console.log(
										                "The following error occured: "+
										                textStatus, errorThrown
										            );
										        },
										        complete: function(){

										        }
										    });

              },
              out: function() {
                      $(this).removeClass('during_collision').addClass('expecting_collision');
              },
 							drop: function(event, ui) {
                      var drag_id = ui.draggable.attr("id").substr(1);
                      var drop_id = $(this).find(".get_post").attr("href").substr(15);
										$(this).removeClass('during_collision').addClass('expecting_collision');



									 $.ajax({
										        url: "/posts/" + drag_id + "/move",
										        type: "get",
														data: {drop_id: drop_id},
										        // callback handler that will be called on success
										        success: function(response, textStatus, jqXHR){
										            // log a message to the console
										            console.log("drop:droppable");
										        },
										        // callback handler that will be called on error
										        error: function(jqXHR, textStatus, errorThrown){
										            // log the error to the console
										            console.log(
										                "The following error occured: "+
										                textStatus, errorThrown
										            );
										        },
										        complete: function(){

										        }
										    });

              }
});
	
	